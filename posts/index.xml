<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on WeiTheShinobi</title>
    <link>/posts/</link>
    <description>Recent content in Posts on WeiTheShinobi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>手把手帶你使用狀態機！以 LeetCode 65. Valid Number 示範</title>
      <link>/posts/my-study-note/article/2023/08leetcode65-with-state-machine/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/08leetcode65-with-state-machine/</guid>
      <description>手把手帶你使用狀態機！以 LeetCode 65. Valid Number 示範 狀態機！啟動！LeetCode 第 65 題，合法的數字：今天選的這個題目還蠻有趣的，可以用一堆 if else 來判斷得到答案，但這個作法會有一堆 edge case 難以處理，而且也很醜、寫起來更是難受，但也可以使用狀態機：就是這次的主題，也許你會在編譯器或 AWS step function 中聽過。我希望帶大家用簡單的方式和類比，來了解這些有趣的事物，只需要懂一點程式就能看懂。探索未知總是令人興奮！
簡單講解題目 Valid Number - LeetCode
輸入一個字串，判斷是否是一個 number，輸出布林值。
number 可以是一個 decimal 或一個 integer，後面可以選擇要不要加 e。
decimal 可以是選擇加上 +/-，且會是以下三擇一：
一個或以上的 digits + . 一個或以上的 digits + . + 一個以上的 digits . + 一個或以上的 digits integer 可以選擇加上 +/-：
一個或以上的 digits 正規表示式 如果英文字母 A 到 Z 是一個英文字母的集合，那單字就是英文字母的排列組合，像是 apple 是英文字母組合成的，接續著說，一個句子就是單字集合照著某些規則組合而成的排列組合，可以想像我們從一本字典中選出一些單字，然後組合起來，像是I like duck，可能有一些主詞、受詞、動詞啊這些從小學到大的觀念，如果能夠照著規則，我們就能很輕鬆的表達出這題，我們只要照著規則把程式碼寫下來就好了。先用簡單的方式，試著用符號來表達題目的意思，這裡使用正規表達式。
可以把正規表示式當成一個方便又實用的工具，用來判斷輸入的字串是否有按照規則，所以我們可以用正規表示式來判斷輸入的字串是不是一個 number。
在方便的今天，如果想知道某些規則的正規表示式怎麼寫（像是合法的 email），只要問 LLM 就能輕鬆得到想要的答案。以下節錄至 ChatGPT 的回答：</description>
    </item>
    
    <item>
      <title>也許程式交易不是你想找的那個印鈔機</title>
      <link>/posts/my-study-note/article/2023/program-trade/</link>
      <pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/program-trade/</guid>
      <description>也許程式交易不是你想找的那個印鈔機 為什麼寫這篇文章呢？最近在思考投資股票，其中我的投資策略會參考某些指標，但老實說每次都要開某些網站還蠻麻煩的，難道我就不能一個按鈕下去，就能知道我要的指標嗎？所以我就很快速地寫了一個計算的程式，寫完之後我就想，既然都要參考某些指標來交易了，幹嘛不做成自動化交易就好了，然後就想到了程式交易，剛好朋友也有在和我討論，與其只跟他講不如跟大家講哈哈。
何謂程式交易？ 現在拿出手機打開券商的 app，下單，程式交易完成。
沒錯，但這應該不是一邊人想像的，與其說是程式交易，不如說是自動化交易。
只要把平常做的事情自動化即可：
首先是搜集資料，下單總要看一下股價吧！把平常會看的資訊收集起來。 整理出需要的指標，有了股價、交易量這些東西，就可以畫成圖、計算想要的指標、回測，可以上網找找看公式，把擁有的資料照著計算即可。舉例來說移動平均線就是簡單的加法和乘法，把每天的點算出來就可以畫成圖，就跟在財經網站上看到的一樣。 延伸學習：
更有效率的計算移動平均線：K Radius Subarray Averages - LeetCode
簡單的說，計算移動平均線時，不用每次都全部算完，只要計算差異的部分即可。（與這題類似）
當然在這個情況可以不用這麼複雜，因為移動平均線頂多看個幾百幾千天，電腦使用沒效率的做法也可以很快地完成。
我的解答放在最下方，如果你要練習請不要先看喔！
有了需要的指標，就可以決定何時要下單，這部分就是簡單的條件判斷：如果符合條件就做某些事 剛剛提到的某些事，可以寫程式連線到券商下單、發出訊息給常用的通訊軟體 不難發現，就只是把平常做的事情交給程式做而已，先看各種指標、價格，然後看看自己的投資策略，有的人是定期定額、有的人是量化交易，然後看完了手動下單，現在全都交給機器來做，這四個步驟可以自己選擇和客製化。
想想看需要什麼 如果只是覺得學了程式就可以在證券市場靠交易賺錢，我覺得是不可能，不需要被焦慮感給控制。但是學習程式是很開心的事情，我覺得得失心不用太重，好奇心就像食慾一樣，得到新的資訊總是使人開心，如果覺得無聊，學習這是一個很好的選擇！
程式只是工具 終歸來說，最重要的還是策略，程式只是幫忙自動化的部分，如果能夠下單賺錢，那自動跟手動會有差嗎？（高頻交易例外，不過我覺得普通人很難參與到這塊，可以忽略。）程式只是幫忙省去麻煩，像是計算指標、下單等等。你不會因為自動化交易就突然賺錢，那也是因為策略本來就是賺錢的。
總結 使用自動化交易並不會使你突然大賺一筆，關鍵在於交易策略，自動化交易只是省去手動的麻煩，讓你能夠睡得安穩（前提是程式有寫好，不然可能睡覺更差）
WeiTheShinobi
// LeetCode 2090. K Radius Subarray Averages // https://leetcode.com/problems/k-radius-subarray-averages/ // golang func getAverages(nums []int, k int) []int { result := make([]int, len(nums)) sum := 0 for i := 0; i &amp;lt; k+k+1 &amp;amp;&amp;amp; i &amp;lt; len(nums); i++ { sum += nums[i] } for i := 0; i &amp;lt; len(nums); i++ { if i &amp;lt; k { result[i] = -1 continue } if i + k &amp;gt;= len(nums) { result[i] = -1 continue } result[i] = sum / (k+k+1) sum -= nums[i-k] if i + k + 1 &amp;gt;= len(nums) { continue } sum += nums[i+k+1] } return result } </description>
    </item>
    
    <item>
      <title>讓這個 Steam 上的遊戲教你做出 CPU：《Turing Complete》</title>
      <link>/posts/my-study-note/article/2023/turing-complete/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/turing-complete/</guid>
      <description>讓這個 Steam 上的遊戲教你做出 CPU：《Turing Complete》 作為一個 Steam 重度用戶，我平時沒事就是逛逛商店，某次意外的發現這個超讚的遊戲，就被這樸實的畫面所吸引，又因為我本就喜歡建造經營類的遊戲，舉例像是《Rimworld》就是個超讚的遊戲，我十分推薦。而這次發現的遊戲就是《Turing Complete》，就是常常聽到的那個圖靈完備，在遊戲中玩家扮演一個實驗體，作為一個被外星人抓來研究的地球生物，將為了保住小命而做出圖靈完備的計算機。
一個接電線的遊戲 說起來遊戲在幹嘛？這就是一個接電線的遊戲。玩家會從一開始的邏輯閘關卡，一步一步領導你，組合不同的邏輯閘變成小元件，不同的小元件組合後，成為一台計算機，你會了解到二進制、二補數、解碼、一堆錯綜復雜的線路、寄存器等等，你也會知道什麼是 opcode、地址、組合語言、stack，你會在遊戲中遇上不同的難關，而你也需要不斷擴充自己的機器才能過關，如果你本來就對程式有點概念，在過關後，就會有種昇華的感覺，非常得愉快，就像是得到了不得了的東西的愉快感。
這遊戲在做什麼 遊戲中並沒有太多的引導，只有任務說明和簡單的術語解釋，玩家需要大量的試錯和思考來完成關卡，如果你本身對於寫程式沒有什麼概念，玩家可以會在中途某些關卡卡住一段時間。玩家需要寫下「對應機器」的組合語言，所謂的「對應機器」就是玩家造好的那台電腦，這可不像在 2023 寫程式那麼方便，因為一切都是玩家設計的，在開始寫邏輯之前需要對照指令集定義一大堆有的沒的，這些做完才能開始用彆扭的方式寫程式。
隨著遊戲深入，玩家會需要更好的處理器架構，同時也要能加上記憶體，才能夠完成後面更加艱難的關卡。
總結 優點 耐玩、遊戲時數高 價格便宜 高難度帶來高成就感 steam workshop 社群 缺點 不太好用的 UI 遊戲指引少 劇情薄弱 這是一款客群較小眾的遊戲，如果你是對於解謎、puzzle 感興趣的玩家，那我十分推薦這款遊戲給你，這遊戲會花掉很多時間在思考，屬於喜歡會非常喜歡，不喜歡完全不想碰的遊戲。
Steam 商店連結：Turing Complete Steam 商店頁面
WeiTheShinobi</description>
    </item>
    
    <item>
      <title>一起學習編譯器吧_01</title>
      <link>/posts/my-study-note/article/2023/compilers01/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/compilers01/</guid>
      <description>一起學習編譯器吧_01 我記得以前聽大學的教授說過：「如果大學只能選一堂課，選編譯器」。最近在學習編譯器，這是系列文的第一篇，我想用費曼學習法來學習，簡單來說，就是要能夠將所學的東西解釋給不懂的人聽，我希望這個系列文能讓一般人也能夠理解，你可以當作有趣的科普，融會貫通後使用到其他地方。如果你對這個主題有興趣，可以看看最下方參考資料的書籍。
為了知道自己不知道 我們常常覺得自己什麼都會了，其實只是因為不知道自己不懂，這樣的無知會讓人充滿自信。其實我是覺得學習編譯器投資報酬率很高，可以有很多應用，舉例來說：整合開發環境（IDE） 在你一邊寫 Code 時就動態地為你檢查語法錯誤、做一些工具、學習計算思維和數學，學編譯器不一定要從事開發編譯器的工作，反正遲早要學會，不如早點學會。
編譯器是什麼 一開始，人類使用 01 序列來編寫程式，明確命令電腦要怎麼做，但是這樣容易出錯而且難讀，舉例來說：電腦有一套指令集，1001 代表加，1, 10 代表地址1, 地址2，一起輸入進去就會計算地址1的值 + 地址2的值。
後來人們有了組合語言：機器指令的別名，例如把 1001改名叫 ADD，這樣就會好寫好懂好讀，還有 macro（就是 C 語言中那個 #define），macro 簡單說就是把程式碼做替換，舉例：#define a x會把a替換成x，用程式寫出程式，然後不斷發展新特性至今，程式語言有了更多的抽象，這些高階語言翻譯成最底層的機器碼來執行。
編譯器把一個語言翻譯成另一個語言，這就像一套流水線一樣：
編譯器先把程式碼分解開來，像是變數、程式語言的關鍵字（if, for, int&amp;hellip;）、常數、運算子（sizeof, +, -&amp;hellip;）等等，方便後面更好動作。
處理空白和註解，這些是給人看的所以要刪掉；生成抽象語法樹，檢查文法有沒有正確，類型檢查，不同的類型要怎麼辦，像是 1 和 1.0 能夠一起運算嗎？需要轉型成整數嗎？或者不正確的類型就是報錯。
生成中間程式碼，最佳化程式碼，最重要的事必須確保意思是一樣的，不然毫無意義。
最後生成目標程式碼（不一定要是機器碼，像是 Java 虛擬機的字節碼等等，程式語言之間也能互相翻譯，例如 Kotlin 可以編譯成 Javascript）。
我們現在很抽象的說每個環節在做什麼，而每個環節的實作都是可以替換的，或者拆分開來，想要不同功能就替換某個實作即可。制定好抽象就確保了好的系統。
下回預告 一個簡單的語法制導翻譯器
參考資料 《编译原理》（Compilers: Principles, Techniques, and Tools）
《现代编译原理》（Modern Compiler Implementation in C）
WeiTheShinobi</description>
    </item>
    
    <item>
      <title>會打字就行！用 Go 語言實作好玩小專案：tree</title>
      <link>/posts/my-study-note/article/2023/quack-tree/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/quack-tree/</guid>
      <description>會打字就行！用 Go 語言實作好玩小專案：tree tree 是一個很讚的工具，它可以把你的資料夾底下的檔案弄成一個樹的型狀，非常的酷。實作這個工具不難，而且也可以擴充很多很酷的功能，本篇將帶大家實作最基本的功能：遞迴印出資料夾下的檔案，我們會使用 Go 語言來實作，一起動動手吧！
什麼是樹？ 樹是一種資料結構，那什麼是樹？為何叫樹？就像是我們在看星星，一顆一顆的星星連起來成了星座。我們看著許許多多的記憶體位址灑在天空，當一個位址指向另一個位址，我們就畫一條線把他們連起來，而最後這個圖形就像樹一樣。同樣的道理，這樣也能理解什麼是鏈結串列了：「排成一串的記憶體位址」，別被名字被疑惑，思考事情的本質。
type TreeNode struct { data any nodes []*TreeNode } 樹跟我們的 tree 有什麼關係？ 看看樹的形狀，再看看你的資料夾，你有發現什麼嗎？這兩個東西形狀真像呢！所以我們可以把這些目錄轉換成樹型資料結構，真是太棒了！而當我們做完第一個資料夾，我們只要遞迴的往子資料夾重複一樣的動作，就可以延伸我們的枝幹。
前往每個樹節點 透過遞迴的方式，可以輕鬆的拜訪每個樹的節點，邏輯是這樣的：拜訪這個節點，如果節點有子節點就拜訪，否則結束，非常的簡單吧！有一些方式可以讓我們選擇，這裡我們使用深度優先搜尋（Depth-First-Search，DFS），如字面上的意思，相對於廣度優先搜尋，深度優先是指如果可以往下走就往下走，不能往下才往側邊走。這裡先有個概念，在接下來的實作中很有幫助。
所謂遞迴 對於不習慣使用遞迴的人來說遞迴很陌生，其實遞迴跟迴圈差不多，就是重複做一樣的事情，輸入的參數就是狀態。每一次創建樹節點就是在做一樣的事情。這次問題的差別在於查詢的路徑不一樣，所以就以路徑當作參數。以下示範遞迴與迴圈從 1 加到 10 總和的實作，還不理解的讀者可以多多思考。
func main() { // 以迴圈的方式 var result int for i := 1; i &amp;lt;= 10; i++ { result += i } fmt.Println(result == 55) // 以遞迴的方式 var recursive func(n int) int recursive = func(n int) int { if n == 1 { return 1 } return n + recursive(n-1) } fmt.</description>
    </item>
    
    <item>
      <title>為什麼你應該刷題？超乎想像的巨大收益</title>
      <link>/posts/my-study-note/article/2023/why-you-should-leetcode/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/why-you-should-leetcode/</guid>
      <description>為什麼你應該刷題？超乎想像的巨大收益 「老師啊，感激不盡，如今的我，就能挑戰星星。」—「碎星」拉塔恩
刷題指的是上 LeetCode 做題目，這個網站提供演算法題目和競賽，不管是初學者或是頂尖大神都能找到挑戰。想想我也做了六百來題了，今天來談談刷題究竟改變了我什麼、我認為的學習方向，我得說，本來以為只是做做題目，最後的結果遠超我的預期，不過都是我的主觀看法啦。
故事從何而起 我認為這是一種長期收益的投資，你並不會因為多學一題而能夠馬上展現差別，但是你做一個專案馬上就可以博人眼球。但我得說刷題是非常值得的，我沒騙你！這也是我寫這篇文章的原因。
我也是看到其他人在講 LeetCode，覺得好像挺有意思才開始刷題的。一開始我覺得難的不得了，連個 easy 題目都做不出來，後來就每天學習，一天一點點的累積其實效果非常顯著，並且讓自己每天至少都能做一題。
經歷過這些也讓我開始思考，我對電腦開始有更多不同的看法，原來寫程式的重點不在寫程式，而是在背後的數學和證明。程式只是實現想法的工具，重要的是把數學的模型放到電腦上，離散數學受用無窮。
達成前置知識 我覺得刷題就像重量訓練，而學框架、專案那些的就像練習用兵器，當然能打出一套招式很帥，不過重訓讓你力氣大，力氣大的人學什麼兵器都能事半功倍。在我大量練習後，動手的能力變強很多，很多事都變簡單了。
這是一個正向的循環，因為覺得簡單所以更傾向去學習更多，而學更多會覺得更多事情變簡單。就好像類銀河惡魔城的遊戲，以前開不了的門必須在之後取得某些力量或鑰匙才能打開，學習到的不只是資料結構與演算法，而是打開後面關卡的鑰匙。
在我看資料庫開發的線上課程時，就聽過一句話：「會開發資料庫，什麼都能開發。」聽起來很合理，因為開發資料庫需要涵蓋大範圍的知識，並行、ACID、怎麼持久化到硬碟、SQL等等，這些不同的知識點融會貫通才能做出資料庫。
歸納與推理 我曾經聽過一個故事：「關於防範駭客，為什麼不自己發明一種符號，這種符號和其他程式不共通，這樣系統就安全了。」
乍聽之下好像蠻合理的，但其實是行不通的，因為電腦中的符號（a, b, c, 1, 2, 3&amp;hellip;）只是 bit 排列組合的子集，而自己發明的符號也會落在這個子集中，一個簡單的舉例來說：現在你設計一個特殊符號@是1001，假如 b 是10，a 是01的話，你的這個特殊符號@就等價於ba而已，不論設計多麽複雜的符號，最終都會在01010101010110....排列組合的子集中。
說這個故事是想表達，當擁有足夠的基礎知識，就能夠推理出很多事情、舉一反三，用公理推測新的事物而不是硬背，現在能學到的都是前人的肩膀，想想開創新的事物是多麽困難？需要多少的前置知識呢？牛頓被蘋果砸到不是偶然。
有些事情不會改變 許多軟體工程師會遇到的問題，一直追新的技術太累了，十年前用的技術與現在不同，當然開發工具也更好用很多。我覺得我對這個問題的解決方法就是：加快學新東西的速度，而加快速度的方法就是建構你的知識譜系。
你讀小說的速度會比你讀不熟悉領域的論文還快，因為你已經熟悉你的母語了，不用看兩行字就跑去 google，所謂的新東西就是在原有的知識中增加或修改一些，這個領域都會依賴這個知識譜系的核心（除非整個核心都替換了），新的東西出來你可以推理，就知道大概是怎麼樣；可以根據以往的經驗歸納，並不會花很多時間學習，這就是學習核心原理的好處，Vue, Spring, Django 等等的框架會改變，但核心的知識不會，這是非常棒的收益。
欣賞美麗的世界 「沒有技藝，靈感不過是風中搖曳的蘆葦。」 —約翰尼斯‧布拉姆斯
這個世界是很美麗的，心流的感覺非常愉快，在你學習的路上，去思考前人的是怎麼想的，讚嘆怎麼可以如此的精巧，這種快樂難以形容。希望大家都能找到自己的方向，有創新的想法卻無法實現是非常可惜的一件事，我希望自己有一天靈感到來時，能有夠能力去做出來。
WeiTheShinobi</description>
    </item>
    
    <item>
      <title>你有想過為什麼一個數能被3整除嗎</title>
      <link>/posts/my-study-note/article/2023/why-mod-3/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/why-mod-3/</guid>
      <description>你有想過為什麼一個數能被3整除嗎 還記得小時候在數學課上學過，如果一個數的所有位數相加能被 3 整除，那它就是就是 3 的倍數。這個公式大家應該都記得，但你有想過為什麼嗎？它的原理何在？該怎麼解釋？本篇會用直白的口吻來帶大家了解這個小數學！
先了解取模 模除（modulo）即是兩數相除的餘數，根據除法原理，我們知道一個數可以被分成n = ax + b，所以n / a = x + b，可以知道n mod a = b，這就像是數學課會看到的8 / 3 = 2 ... 2這樣的式子。在一些程式語言中，你可以看到 mod 運算以%表示。取模是一個應用廣泛的運算，生活中常見的例子就是分組，舉例來說：一個班級要分成三組，每個人的號碼 mod 3，會發現只會得到 0, 1 或 2，這樣就成功分成三組了。小到計算最大公因數、大到密碼學都會用到取模。
數學課教的公式 數學課學到：一個數字的所有位數相加，只要計算這個數字 mod 3 是否等於 0，就能知道此數能否被 3 整除，如果用 153 為例：我們把1 + 5 + 3 = 9，因為 9 是 3 的倍數，所以 153 能被 3 整除。接下來我們來看看這是如何推論的。
所以如何推導 我們知道 mod 有交換律，即：
(a+b) mod c = [(a mod c) + (b mod c)] mod c</description>
    </item>
    
    <item>
      <title>Clean Architecture 替我解決的痛點</title>
      <link>/posts/my-study-note/article/2023/clean-architecture/</link>
      <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-study-note/article/2023/clean-architecture/</guid>
      <description>Clean Architecture 替我解決的痛點 WeiTheShinobi
Clean Architecture 是我讀的一本書，這本書講了架構、SOLID、作者的自傳等等，我來分享一些我得到的新東西，也許這比較像是讀書心得或是我對自己的碎碎念。
被資料庫綁架 我想這是出發點問題，很多人應該看過以下這種依賴關係：
這是你常常會看到的做法，甚至是網路上很多的範例也是這樣，程式可以跑、可以正確執行，我不知道你有沒有這樣想過，但我總是覺得這種做法卡卡的，不管是開發中或是日後維護，總是有種說不出的怪，為什麼改起來怪怪的？接手起來好痛苦啊！需求改動總是像大地震一樣，最終變成一團義大利麵。商業邏輯依賴於資料庫表、直接使用資料庫表的 model 輸出，語意不明確又容易出錯。
以領域為主 以主要的商業邏輯做出發點，寫出邏輯與資料結構，你不需要知道你的資料是從 MySQL 還是 Redis 來的，你只需要知道有個東西會給你資料。你也不需要知道你的資料會送到瀏覽器、桌面應用還是 RPC，你只知道把資料交出去就對了。把主要的邏輯與 IO 的部分解耦，讓外部依賴領域邏輯，也不要讓外部插手領域邏輯，這樣你才能在日後改變的更少，為何？這與依賴關係有關。
所謂依賴 並不是把程式分開來寫就真的解耦了，重點在於依賴關係，這與你用微服務或是單體無關，上游改動下游就會受到影響，所以管理依賴很重要，如果把常常變動的元件當作核心會很痛苦的，在 Go 語言中你的迴圈依賴是過不了編譯器的。
簡單點 我覺得寫 code 還是要取捨，功能就只是簡單的讀取資料就簡單寫，不要過度設計，在動態中逐步成長，一開始就弄一堆有的沒的也許之後也用不到了，還讓接手的人覺得困擾，一堆不必要的 interface 在 trace 的時候是挺困擾的，記得那句話：「你現在不需要」，我覺得其實寫程式還是很自由的，但不代表做什麼都可以，遵守基礎的原則然後發揮創意，就像畫畫一樣。
測試程式碼 我基本上是那種會「一邊寫測試一邊開發」的人，所以測試的痛我有感觸，我常常覺得測試寫起來難以維護，測試依賴於產品程式碼，所以測試維護寫得不好維護成本超高，維護超累就懶得弄，懶得弄測試就沒意義了，寫測試也是需要思考與練習的。別讓測試特定化，這也是我常犯的錯，太過訂製的測試會一改就廢，測試需要 mock 、輸入輸出都需要想想，我現在寫測試都會思考如何讓測試更好維護。
聊聊框架 以前用 Java Spring Boot 框架，那時就覺得這根本是魔法，怎麼可以這麼方便啊！加上一個註解就幫我做好多事，依賴注入還有開箱即用真的很舒服，後來我開始寫 Go，我動手實作以前那些所謂的「魔法」，注入物件、初始化，不知道為什麼心裡反而有種踏實的感覺哈哈哈哈，畢竟以前都是讓框架來替我管理，大概是因為自己從頭寫到尾真的理解了吧，回到正題，我想說少即是多，也許是時候開始思考你到底需要什麼，就像家裡面有一堆放很久沒用到的東西，之後大概也用不到，可以丟掉了。
推薦大家都可以看看這本書
參考資料：《Clean Architecture》</description>
    </item>
    
  </channel>
</rss>
